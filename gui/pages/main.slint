import { Theme } from "../blocks/themes.slint";
import { values } from "../blocks/values.slint";
import { Textf } from "../blocks.slint";
export struct Clients {
    device: string,
    points: string,
    project: string,
    percent: string}

component DeviceWidget inherits Rectangle {
    background: Theme.background-color;
    height: 40px;
    border-color: Theme.border-color;
    border-radius: 20px;
    border-width: 2px;
    in property <[Clients]> Clients;
    Image {
        source: @image-url("../icons/cpu.svg");
        colorize: Theme.icon-color;
        width: 25px;
        height: 25px;
        x: 10px;
    }

    Image {
        source: @image-url("../icons/start.svg");
        colorize: Theme.icon-color;
        width: 20px;
        height: 20px;
        x: 336px;
    }

    Image {
        source: @image-url("../icons/block.svg");
        colorize: Theme.icon-color;
        width: 20px;
        height: 20px;
        x: 357px;
    }

    Image {
        source: @image-url("../icons/resume.svg");
        colorize: Theme.icon-color;
        width: 25px;
        height: 25px;
        x: 374px;
    }

    Image {
        source: @image-url("../icons/pause.svg");
        colorize: Theme.icon-color;
        width: 25px;
        height: 25px;
        x: 395px;
    }
}

component Device_Header inherits Rectangle {
    height: 25px;
    Rectangle {
        height: 25px;
        border-radius: 12px;
        width: txt.width + 20px;
        background: Theme.background-color;
        border-color: Theme.border-color;
        border-width: 2px;
        x: 0;
        txt := Textf {
            text: "ryzen7-5800x-a";
        }
    }

    Rectangle {
        height: 25px;
        border-radius: 12px;
        width: 260px;
        background: Theme.background-color;
        border-color: Theme.border-color;
        border-width: 2px;
        x: (root.width / 2) - self.width / 2 + 35px;
        Textf {
            text: "Points: 12,435,312  Frames: 14,453";
        }
    }

    ta := TouchArea {
        x: root.width - 35px;
        width: rect.width;
        rect := Rectangle {
            
            width: 25px;
            height: 25px;
            border-radius: 12px;
            background: Theme.background-color;
            border-color: Theme.border-color;
            border-width: 2px;
            animate width { duration: 100ms; }
        }

        Image {
            source: @image-url("../icons/start.svg");
            colorize: Theme.icon-color;
            width: 18px;
            height: 18px;
        
        }

        states [
            hover when ta.has-hover: {
                rect.width: 130px;
            }
        ]
    }
}

component DeviceLayout inherits VerticalLayout {
    y: 255px;
    spacing: 5px;
    Device_Header { }

    DeviceWidget { }

    Rectangle {
        height: 25px;
        border-radius: 12px;
        width: 110px;
        background: Theme.background-color;
        border-color: Theme.border-color;
        border-width: 2px;
        Textf {
            text: "Network Clients";
        }
    }
}

component Stats-text inherits Textf {
    x: 15px;
    font-size: 17px;
}

component StatsWidget inherits Rectangle {
    background: #1a1919;
    height: 230px;
    border-radius: 15px;
    border-color: #4d4d4d;
    border-width: 2px;
    Rectangle {
        x: 0px + parent.width - self.width - 10px;
        y: 10px;
        border-color: #414141;
        width: 90px;
        height: 25px;
        border-width: 2px;
        border-radius: 5px;
        Textf {
            text: "General Info";
        }
    }

    VerticalLayout {
        y: 10px;
        alignment: start;
        spacing: 2px;
        Stats-text {
            text: "Time Elapsed: \{values.time_elapsed}";
        }

        Stats-text {
            text: "Total Points: \{values.total_points}";
        }

        Stats-text {
            text: "Total Frames: \{values.total_frames}";
        }

        Stats-text {
            text: "Total Download: \{values.total_download}";
        }

        Stats-text {
            text: "Total Upload: \{values.total_upload}";
        }

        Stats-text {
            text: "Frames Left On Sheepit: \{values.frames_left}";
        }

        Stats-text {
            text: "Sheepit Version: \{values.sheepit_version}";
        }

        Stats-text {
            text: "Manager Version: \{values.manager_version}";
        }
    }
}

export component Main {
    DeviceLayout {
        padding-left: 10px;
        padding-right: 10px;
    }

    StatsWidget {
        x: 70px;
        y: 15px;
        width: root.width - 81px;
    }
}
